// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to WebrtcVadLibrary
class WebrtcVadLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WebrtcVadLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WebrtcVadLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Fvad> fvad_new() {
    return _fvad_new();
  }

  late final _fvad_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Fvad> Function()>>('fvad_new');
  late final _fvad_new =
      _fvad_newPtr.asFunction<ffi.Pointer<Fvad> Function()>();

  void fvad_free(
    ffi.Pointer<Fvad> inst,
  ) {
    return _fvad_free(
      inst,
    );
  }

  late final _fvad_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Fvad>)>>(
          'fvad_free');
  late final _fvad_free =
      _fvad_freePtr.asFunction<void Function(ffi.Pointer<Fvad>)>();

  void fvad_reset(
    ffi.Pointer<Fvad> inst,
  ) {
    return _fvad_reset(
      inst,
    );
  }

  late final _fvad_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Fvad>)>>(
          'fvad_reset');
  late final _fvad_reset =
      _fvad_resetPtr.asFunction<void Function(ffi.Pointer<Fvad>)>();

  int fvad_set_mode(
    ffi.Pointer<Fvad> inst,
    int mode,
  ) {
    return _fvad_set_mode(
      inst,
      mode,
    );
  }

  late final _fvad_set_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Fvad>, ffi.Int)>>(
          'fvad_set_mode');
  late final _fvad_set_mode =
      _fvad_set_modePtr.asFunction<int Function(ffi.Pointer<Fvad>, int)>();

  int fvad_set_sample_rate(
    ffi.Pointer<Fvad> inst,
    int sample_rate,
  ) {
    return _fvad_set_sample_rate(
      inst,
      sample_rate,
    );
  }

  late final _fvad_set_sample_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Fvad>, ffi.Int)>>(
          'fvad_set_sample_rate');
  late final _fvad_set_sample_rate = _fvad_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<Fvad>, int)>();

  int fvad_process(
    ffi.Pointer<Fvad> inst,
    ffi.Pointer<ffi.Int16> frame,
    int length,
  ) {
    return _fvad_process(
      inst,
      frame,
      length,
    );
  }

  late final _fvad_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Fvad>, ffi.Pointer<ffi.Int16>,
              ffi.Size)>>('fvad_process');
  late final _fvad_process = _fvad_processPtr.asFunction<
      int Function(ffi.Pointer<Fvad>, ffi.Pointer<ffi.Int16>, int)>();
}

final class Fvad extends ffi.Opaque {}
